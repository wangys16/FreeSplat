GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
[2024-10-12 16:22:05,224][py.warnings][WARNING] - /home/wang/anaconda3/envs/ps/lib/python3.10/site-packages/lightning_fabric/plugins/environments/slurm.py:204: The `srun` command is available on your system but is not used. HINT: If your intention is to run Lightning on SLURM, prepend your python command with `srun` like so: srun python /home/wang/lab/freesplat_github/src/main.py +experim ...
[2024-10-12 16:22:05,257][py.warnings][WARNING] - /home/wang/anaconda3/envs/ps/lib/python3.10/site-packages/timm/models/_factory.py:117: UserWarning: Mapping deprecated model name tf_efficientnetv2_s_in21ft1k to current tf_efficientnetv2_s.in21k_ft_in1k.
  model = create_fn(
[2024-10-12 16:22:05,625][timm.models._builder][INFO] - Loading pretrained weights from Hugging Face hub (timm/tf_efficientnetv2_s.in21k_ft_in1k)
[2024-10-12 16:22:05,877][timm.models._hub][INFO] - [timm/tf_efficientnetv2_s.in21k_ft_in1k] Safe alternative available for 'pytorch_model.bin' (as 'model.safetensors'). Loading weights using safetensors.
Setting up [LPIPS] perceptual loss: trunk [vgg], v[0.1], spatial [off]
[2024-10-12 16:22:06,109][py.warnings][WARNING] - /home/wang/anaconda3/envs/ps/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
[2024-10-12 16:22:06,109][py.warnings][WARNING] - /home/wang/anaconda3/envs/ps/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
You are using a CUDA device ('NVIDIA GeForce RTX 4090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at checkpoints/fvt.ckpt
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
Loaded model weights from the checkpoint at checkpoints/fvt.ckpt
Loading model from: /home/wang/anaconda3/envs/ps/lib/python3.10/site-packages/lpips/weights/v0.1/vgg.pth
dataset:
    view_sampler: {'name': 'evaluation', 'index_path': 'assets/evaluation_index_scannet.json', 'num_context_views': 11, 'random': True}
    name: scannet
    roots: ['/home/wang/ssd/scannet/scannet_surn/scannet']
    make_baseline_1: False
    augment: True
    image_shape: [384, 512]
    background_color: [0.0, 0.0, 0.0]
    cameras_are_circular: False
    baseline_epsilon: 0.001
    max_fov: 100.0
    load_depth: True
    overfit_to_scene: None
    near: 0.5
    far: 15.0
model:
    encoder: {'backbone': {'name': 'efficientnet', 'model': 'efficientnet', 'd_out': 512}, 'name': 'freesplat', 'opacity_mapping': {'initial': 0.0, 'final': 0.0, 'warm_up': 1}, 'num_monocular_samples': 32, 'num_surfaces': 1, 'predict_opacity': False, 'near_disparity': 3.0, 'gaussians_per_pixel': 3, 'gaussian_adapter': {'gaussian_scale_min': 0.5, 'gaussian_scale_max': 15.0, 'sh_degree': 2, 'depth_sup': True}, 'd_feature': 128, 'epipolar_transformer': {'self_attention': {'patch_size': 4, 'num_octaves': 10, 'num_layers': 2, 'num_heads': 4, 'd_token': 128, 'd_dot': 128, 'd_mlp': 256}, 'num_octaves': 10, 'num_layers': 2, 'num_heads': 4, 'num_samples': 32, 'd_dot': 128, 'd_mlp': 256, 'downscale': 4}, 'visualizer': {'num_samples': 8, 'min_resolution': 256, 'export_ply': False}, 'apply_bounds_shim': False, 'use_epipolar_transformer': False, 'use_transmittance': False, 'load_depth': False, 'est_depth': 'cost', 'unimatch_weights_path': 'checkpoints/gmdepth-scale1-resumeflowthings-scannet-5d9d7964.pth', 'multiview_trans_attn_split': 2, 'costvolume_unet_feat_dim': 128, 'costvolume_unet_channel_mult': [1, 1, 1], 'costvolume_unet_attn_res': [], 'depth_unet_feat_dim': 64, 'depth_unet_attn_res': [], 'depth_unet_channel_mult': [1, 1, 1], 'downscale_factor': 4, 'shim_patch_size': 4, 'wo_depth_refine': False, 'wo_cost_volume': False, 'wo_backbone_cross_attn': False, 'wo_cost_volume_refine': False, 'use_epipolar_trans': False, 'num_views': 9, 'num_depth_candidates': 128}
    decoder: {'name': 'splatting_cuda'}
loss:
    mse: {'weight': 1.0}
    lpips: {'weight': 0.05, 'apply_after_step': 0}
output_dir: test_fvt
wandb:
    project: pixelsplat
    entity: placeholder
    name: scannet
    mode: offline
    tags: ['scannet', '384x512']
mode: test
data_loader:
    train: {'num_workers': 16, 'persistent_workers': True, 'batch_size': 1, 'seed': 1234}
    test: {'num_workers': 4, 'persistent_workers': False, 'batch_size': 1, 'seed': 2345}
    val: {'num_workers': 1, 'persistent_workers': True, 'batch_size': 1, 'seed': 3456}
optimizer:
    lr: 0.0001
    warm_up_steps: 100
    cosine_lr: True
checkpointing:
    load: checkpoints/fvt.ckpt
    every_n_train_steps: 10000
    save_top_k: -1
train:
    load_depth: None
    depth_mode: depth
    extended_visualization: False
    depth_sup: True
test:
    output_path: outputs/test
seed: 111123
strict: True
trainer:
    max_steps: 300001
    val_check_interval: 5000
    gradient_clip_val: 0.01
    prog_bar: True
index_path: assets/evaluation_index_scannet.json
--------------------data root: /home/wang/ssd/scannet/scannet_surn/scannet
Test step 000000.
[2024-10-12 16:22:09,997][py.warnings][WARNING] - /home/wang/lab/freesplat_github/src/model/encoder/common/gaussian_adapter.py:36: UserWarning: torch.range is deprecated and will be removed in a future release because its behavior is inconsistent with Python's range builtin. Instead, use torch.arange, which produces values in [start, end).
  i_coords, j_coords = torch.meshgrid(torch.range(0,height-1), torch.range(0,width-1), indexing='ij')
processing scene0553_00_0
abs_diff: 0.06450559943914413, rel_diff: 0.0417201966047287, delta_25: 0.990215539932251
Setting up [LPIPS] perceptual loss: trunk [vgg], v[0.1], spatial [off]
Loading model from: /home/wang/anaconda3/envs/ps/lib/python3.10/site-packages/lpips/weights/v0.1/vgg.pth
psnr: tensor(27.8954, device='cuda:0') lpips: tensor(0.1987, device='cuda:0') ssim: tensor(0.8833, device='cuda:0') num: 7
psnr: tensor(27.5097, device='cuda:0') lpips: tensor(0.2258, device='cuda:0') ssim: tensor(0.8833, device='cuda:0') num: 2
processing scene0553_00_1
abs_diff: 0.1653895378112793, rel_diff: 0.1442156285047531, delta_25: 0.8602368235588074
psnr: tensor(28.3940, device='cuda:0') lpips: tensor(0.2657, device='cuda:0') ssim: tensor(0.8710, device='cuda:0') num: 8
psnr: tensor(28.1860, device='cuda:0') lpips: tensor(0.2683, device='cuda:0') ssim: tensor(0.8723, device='cuda:0') num: 2
scene0553_00_0 27.895402908325195 0.8832534551620483 0.19867363572120667 27.50971221923828 0.8833165168762207 0.22578299045562744 0.06450559943914413 0.0417201966047287 0.990215539932251
scene0553_00_1 28.39399528503418 0.8709824085235596 0.26567578315734863 28.18600082397461 0.8722630143165588 0.268280565738678 0.1653895378112793 0.1442156285047531 0.8602368235588074
psnr_inter_avg: 28.161318842569987 ssim_inter_avg: 0.8767088969548543 lpips_inter_avg: 0.23440811435381573 depth_abs_diff_avg: 0.11494757 depth_rel_diff_avg: 0.09296791 depth_delta_25_avg: 0.9252262
psnr_extra_avg: 27.847856521606445 ssim_extra_avg: 0.8777897655963898 lpips_extra_avg: 0.2470317780971527
num_gaussians_avg: 846316.0